---
description: 
globs: 
alwaysApply: false
---
# GT-NL 开发工作流指南

## 开发环境设置
要开始GT-NL项目开发，请确保您的环境满足以下要求：
- Bun >= 1.0.0
- Node.js >= 16.0.0 (兼容模式)
- Git >= 2.20.0
- 支持的操作系统：macOS 10.15+、Windows 10+、Linux主流发行版

## 项目结构
项目将采用以下目录结构：
```
gt-nl/
├── src/                    # 源代码目录
│   ├── cli/                # 命令行接口
│   ├── core/               # 核心处理逻辑
│   │   ├── nlp/            # 自然语言处理模块
│   │   ├── git/            # Git命令执行模块
│   │   ├── analysis/       # 代码分析模块
│   │   └── learning/       # 学习适应系统
│   ├── utils/              # 工具函数
│   └── types/              # TypeScript类型定义
├── tests/                  # 测试文件
├── docs/                   # 文档目录
├── package.json            # 项目配置
├── tsconfig.json           # TypeScript配置
└── README.md               # 项目说明
```

## 开发流程
GT-NL项目采用迭代式开发流程：

1. **需求分析**：基于[产品需求文档](mdc:prd.md)确定当前迭代目标
2. **任务分解**：将需求拆分为具体开发任务
3. **功能开发**：按照[技术架构](mdc:技术架构.md)指南实现功能
4. **测试验证**：单元测试、集成测试和用户体验测试
5. **迭代交付**：完成迭代目标，准备下一轮迭代

## 代码贡献流程
1. **分支策略**
   - `main`: 主分支，保持稳定版本
   - `develop`: 开发分支，集成待发布功能
   - `feature/*`: 功能分支，用于开发新功能
   - `bugfix/*`: 修复分支，用于修复问题
   - `release/*`: 发布分支，准备版本发布

2. **提交规范**
   提交信息应遵循以下格式：
   ```
   <type>(<scope>): <subject>
   
   <body>
   
   <footer>
   ```
   
   其中type可以是：
   - feat: 新功能
   - fix: 修复
   - docs: 文档更新
   - style: 代码格式修改
   - refactor: 代码重构
   - perf: 性能优化
   - test: 测试相关
   - chore: 构建过程或辅助工具变动

3. **代码审查**
   所有代码变更必须通过至少一名团队成员的审查才能合并到develop分支。

## 版本发布流程
1. 从develop分支创建release分支
2. 在release分支上完成最终测试和修复
3. 将release分支合并到main分支并打标签
4. 将release分支合并回develop分支

## 性能与质量要求
参考[技术架构文档 - 性能指标](mdc:技术架构.md)中的目标值和优化方向。
