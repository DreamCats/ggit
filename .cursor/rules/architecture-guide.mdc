---
description: 
globs: 
alwaysApply: false
---
# GT-NL 项目架构指南

## 系统架构层次
GT-NL系统采用分层架构设计，从上到下依次为：

1. **用户交互层** - 负责CLI/GUI/IDE插件接口
2. **核心处理层** - 负责自然语言分析、命令生成、代码分析和风险防护
3. **执行/适配层** - 负责Git命令执行和代码分析
4. **存储与持久化层** - 负责配置、历史和学习数据管理

## 核心模块结构
系统由四个主要模块组成：

### 自然语言交互引擎
- 意图解析模块：将用户输入转换为操作意图
- 命令生成模块：将操作意图转换为Git命令
- 执行预览模块：分析命令影响并可视化展示

参考：[技术架构文档 - 自然语言交互引擎](mdc:技术架构.md)

### Git命令执行与安全层
- 命令验证模块：进行安全检查与风险评估
- 命令执行模块：执行Git操作并监控结果
- 回滚保障模块：提供操作历史和回退机制

参考：[技术架构文档 - Git命令执行与安全层](mdc:技术架构.md)

### 代码分析引擎
- 代码解析模块：生成AST并进行代码遍历
- 规则执行模块：进行安全/质量/规范检查
- 修复建议模块：生成问题诊断和解决方案

参考：[技术架构文档 - 代码分析引擎](mdc:技术架构.md)

### 学习适应系统
- 用户行为跟踪：记录和分析用户操作
- 模型优化模块：进行个性化模型微调
- 团队规范学习：检测和适应项目惯例

参考：[技术架构文档 - 学习适应系统](mdc:技术架构.md)

## 数据流设计
系统有三个主要数据流程：

1. **用户指令处理流**：用户输入 → 意图解析 → 命令生成 → 风险评估 → 执行预览 → 用户确认 → 命令执行 → 结果反馈
2. **代码分析流**：触发扫描 → 文件选择 → 代码解析 → 规则匹配 → 问题收集 → 风险评级 → 修复建议 → 结果展示
3. **学习反馈流**：用户操作 → 行为记录 → 模式识别 → 模型调整 → 适应性提升

## 技术实现路径
项目将分三个阶段实现：

1. **基础功能实现**：搭建框架、基本Git命令解析与执行、简单NLP引擎
2. **核心能力构建**：完善NLP能力、代码分析基础功能、风险防护机制
3. **高级特性与优化**：学习适应系统、增强代码分析、性能优化
