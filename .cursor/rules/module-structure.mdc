---
description: 
globs: 
alwaysApply: false
---
# GT-NL 模块结构详解

## 核心模块组织

GT-NL系统由以下核心模块组成，每个模块有明确的职责和边界：

## 1. 自然语言交互引擎 (src/core/nlp)

### 功能职责
- 解析用户自然语言输入
- 提取操作意图和参数
- 生成对应Git命令
- 提供操作预览

### 关键组件
- **LanguageParser** - 将自然语言转换为结构化意图
- **IntentRecognizer** - 识别用户意图类型
- **CommandGenerator** - 基于意图生成对应Git命令
- **OperationPreview** - 分析命令影响并进行可视化

### 技术实现
```typescript
// 示例：意图识别接口
interface Intent {
  action: string;            // 如 'commit', 'merge', 'checkout'
  parameters: {
    [key: string]: any;      // 如 {message: '修复登录BUG', files: ['*.js']}
  };
  confidence: number;        // 识别置信度
}

// 示例：命令生成器
class CommandGenerator {
  generateCommand(intent: Intent): string {
    // 根据意图生成对应的Git命令
  }
}
```

## 2. Git命令执行与安全层 (src/core/git)

### 功能职责
- 安全执行Git命令
- 风险评估与拦截
- 提供操作回退机制
- 错误处理与恢复

### 关键组件
- **CommandValidator** - 验证命令安全性
- **GitExecutor** - 封装Git命令执行
- **BackupManager** - 管理操作备份点
- **RollbackService** - 提供回滚能力

### 技术实现
```typescript
// 示例：命令验证器
class CommandValidator {
  validateCommand(command: string): ValidationResult {
    // 分析命令风险级别和影响范围
  }
}

// 示例：执行器
class GitExecutor {
  async execute(command: string): Promise<ExecutionResult> {
    // 安全执行Git命令并返回结果
  }
}
```

## 3. 代码分析引擎 (src/core/analysis)

### 功能职责
- 代码安全检测
- 代码质量分析
- 规范符合性检查
- 修复建议生成

### 关键组件
- **CodeParser** - 解析代码为AST
- **RuleEngine** - 规则执行引擎
- **SecurityScanner** - 安全漏洞检测
- **QualityAnalyzer** - 代码质量分析
- **FixGenerator** - 自动修复生成

### 技术实现
```typescript
// 示例：规则引擎
class RuleEngine {
  async executeRules(files: string[], ruleSet: RuleSet): Promise<AnalysisResult> {
    // 在指定文件上执行规则集
  }
}

// 示例：修复生成器
class FixGenerator {
  generateFix(issue: CodeIssue): FixProposal {
    // 基于问题生成修复建议
  }
}
```

## 4. 学习适应系统 (src/core/learning)

### 功能职责
- 用户行为记录与分析
- 个性化模型调优
- 团队规范学习
- 提供适应性建议

### 关键组件
- **BehaviorTracker** - 跟踪用户操作
- **ModelOptimizer** - 优化语言理解模型
- **PreferenceManager** - 管理用户偏好设置
- **ConventionLearner** - 学习项目规范

### 技术实现
```typescript
// 示例：行为跟踪器
class BehaviorTracker {
  recordAction(user: User, action: UserAction): void {
    // 记录用户操作
  }
  
  analyzePatterns(user: User): UserBehaviorProfile {
    // 分析用户行为模式
  }
}

// 示例：规范学习器
class ConventionLearner {
  learnFromRepository(repo: Repository): ProjectConventions {
    // 学习项目惯例和规范
  }
}
```

## 5. CLI界面 (src/cli)

### 功能职责
- 命令行交互
- 输出格式化
- 进度展示
- 帮助文档

### 关键组件
- **CommandRegistry** - 注册命令处理程序
- **OutputFormatter** - 格式化输出结果
- **InteractivePrompt** - 提供交互式提示
- **HelpGenerator** - 生成帮助文档

### 技术实现
```typescript
// 示例：命令处理
class CommandRegistry {
  registerCommand(name: string, handler: CommandHandler): void {
    // 注册命令处理程序
  }
  
  async executeCommand(name: string, args: string[]): Promise<void> {
    // 执行注册的命令
  }
}
```

## 模块间通信

模块间通信采用基于事件的架构：

```typescript
// 示例：事件总线
class EventBus {
  subscribe(eventType: string, handler: EventHandler): Subscription {
    // 订阅事件
  }
  
  publish(eventType: string, payload: any): void {
    // 发布事件
  }
}
```

## 数据存储结构

系统采用以下数据模型：

- **用户配置** - 存储用户偏好和设置
- **操作历史** - 记录命令执行历史
- **学习数据** - 存储行为模式和优化参数
- **项目规范** - 存储学习到的项目规范
